"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapboxQueueProcessingFargateService = void 0;
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_ecs_patterns_1 = require("aws-cdk-lib/aws-ecs-patterns");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Class to create a queue processing Fargate service. This class was adapted from aws-cdk-lib MapboxQueueProcessingFargateService class but enhanced with more props that couldn't be achieved by extending the class
 * @see https://github.com/aws/aws-cdk/blob/v2.109.0/packages/aws-cdk-lib/aws-ecs-patterns/lib/fargate/queue-processing-fargate-service.ts
 */
class MapboxQueueProcessingFargateService extends aws_ecs_patterns_1.QueueProcessingServiceBase {
    /**
     * Constructs a new instance of the QueueProcessingFargateService class.
     */
    constructor(scope, id, props) {
        var _a;
        super(scope, id, props);
        // Create a Task Definition for the container to start
        this.taskDefinition = new aws_ecs_1.FargateTaskDefinition(this, 'QueueProcessingTaskDef', {
            memoryLimitMiB: props.memoryLimitMiB || 512,
            cpu: props.cpu || 256,
            family: props.family,
            runtimePlatform: props.runtimePlatform,
            volumes: props.volumes
        });
        const containerName = (_a = props.containerName) !== null && _a !== void 0 ? _a : 'QueueProcessingContainer';
        this.taskDefinition.addContainer(containerName, {
            image: props.image,
            command: props.command,
            environment: this.environment,
            secrets: this.secrets,
            logging: this.logDriver,
            healthCheck: props.healthCheck,
            privileged: props.privileged,
            memoryReservationMiB: props.memoryReservationMiB,
            readonlyRootFilesystem: props.readonlyRootFilesystem
        });
        // The desiredCount should be removed from the fargate service when the feature flag is removed.
        const desiredCount = aws_cdk_lib_1.FeatureFlags.of(this).isEnabled(aws_cdk_lib_1.cx_api.ECS_REMOVE_DEFAULT_DESIRED_COUNT)
            ? undefined
            : this.minCapacity;
        // Create a Fargate service with the previously defined Task Definition and configure
        // autoscaling based on cpu utilization and number of messages visible in the SQS queue.
        this.service = new aws_ecs_1.FargateService(this, 'QueueProcessingFargateService', {
            cluster: this.cluster,
            desiredCount: desiredCount,
            taskDefinition: this.taskDefinition,
            serviceName: props.serviceName,
            minHealthyPercent: props.minHealthyPercent,
            maxHealthyPercent: props.maxHealthyPercent,
            propagateTags: props.propagateTags,
            enableECSManagedTags: props.enableECSManagedTags,
            platformVersion: props.platformVersion,
            deploymentController: props.deploymentController,
            securityGroups: props.securityGroups,
            vpcSubnets: props.taskSubnets,
            assignPublicIp: props.assignPublicIp,
            circuitBreaker: props.circuitBreaker,
            capacityProviderStrategies: props.capacityProviderStrategies,
            enableExecuteCommand: props.enableExecuteCommand
        });
        this.configureAutoscalingForService(this.service);
        this.grantPermissionsToService(this.service);
    }
}
exports.MapboxQueueProcessingFargateService = MapboxQueueProcessingFargateService;
//# sourceMappingURL=data:application/json;base64,